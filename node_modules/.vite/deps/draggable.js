import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/draggable/dist/draggable.min.js
var require_draggable_min = __commonJS({
  "node_modules/draggable/dist/draggable.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : t.Draggable = e();
    }(exports, function() {
      "use strict";
      var t = { grid: 0, filterTarget: null, limit: { x: null, y: null }, threshold: 0, setCursor: false, setPosition: true, smoothDrag: true, useGPU: true, onDrag: u, onDragStart: u, onDragEnd: u }, e = { transform: function() {
        for (var t2 = " -o- -ms- -moz- -webkit-".split(" "), e2 = document.body.style, n2 = t2.length; n2--; ) {
          var o2 = t2[n2] + "transform";
          if (o2 in e2) return o2;
        }
      }() }, n = { assign: function() {
        for (var t2 = arguments[0], e2 = arguments.length, n2 = 1; n2 < e2; n2++) {
          var o2 = arguments[n2];
          for (var i2 in o2) t2[i2] = o2[i2];
        }
        return t2;
      }, bind: function(t2, e2) {
        return function() {
          t2.apply(e2, arguments);
        };
      }, on: function(t2, e2, o2) {
        if (e2 && o2) n.addEvent(t2, e2, o2);
        else if (e2) for (var i2 in e2) n.addEvent(t2, i2, e2[i2]);
      }, off: function(t2, e2, o2) {
        if (e2 && o2) n.removeEvent(t2, e2, o2);
        else if (e2) for (var i2 in e2) n.removeEvent(t2, i2, e2[i2]);
      }, limit: function(t2, e2) {
        return e2 instanceof Array ? t2 < (e2 = [+e2[0], +e2[1]])[0] ? t2 = e2[0] : t2 > e2[1] && (t2 = e2[1]) : t2 = +e2, t2;
      }, addEvent: "attachEvent" in Element.prototype ? function(t2, e2, n2) {
        t2.attachEvent("on" + e2, n2);
      } : function(t2, e2, n2) {
        t2.addEventListener(e2, n2, false);
      }, removeEvent: "attachEvent" in Element.prototype ? function(t2, e2, n2) {
        t2.detachEvent("on" + e2, n2);
      } : function(t2, e2, n2) {
        t2.removeEventListener(e2, n2);
      } };
      function o(e2, o2) {
        var i2 = this, r2 = n.bind(i2.start, i2), s2 = n.bind(i2.drag, i2), u2 = n.bind(i2.stop, i2);
        if (!a(e2)) throw new TypeError("Draggable expects argument 0 to be an Element");
        o2 = n.assign({}, t, o2), n.assign(i2, { element: e2, handle: o2.handle && a(o2.handle) ? o2.handle : e2, handlers: { start: { mousedown: r2, touchstart: r2 }, move: { mousemove: s2, mouseup: u2, touchmove: s2, touchend: u2 } }, options: o2 }), i2.initialize();
      }
      function i(t2) {
        return parseInt(t2, 10);
      }
      function r(t2) {
        return "currentStyle" in t2 ? t2.currentStyle : getComputedStyle(t2);
      }
      function s(t2) {
        return null != t2;
      }
      function a(t2) {
        return t2 instanceof Element || "undefined" != typeof HTMLDocument && t2 instanceof HTMLDocument;
      }
      function u() {
      }
      return n.assign(o.prototype, { setOption: function(t2, e2) {
        var n2 = this;
        return n2.options[t2] = e2, n2.initialize(), n2;
      }, get: function() {
        var t2 = this.dragEvent;
        return { x: t2.x, y: t2.y };
      }, set: function(t2, e2) {
        var n2 = this.dragEvent;
        return n2.original = { x: n2.x, y: n2.y }, this.move(t2, e2), this;
      }, dragEvent: { started: false, x: 0, y: 0 }, initialize: function() {
        var t2, o2 = this, i2 = o2.element, s2 = (o2.handle, i2.style), a2 = r(i2), u2 = o2.options, f = e.transform, l = o2._dimensions = { height: i2.offsetHeight, left: i2.offsetLeft, top: i2.offsetTop, width: i2.offsetWidth };
        u2.useGPU && f && ("none" === (t2 = a2[f]) && (t2 = ""), s2[f] = t2 + " translate3d(0,0,0)"), u2.setPosition && (s2.display = "block", s2.left = l.left + "px", s2.top = l.top + "px", s2.width = l.width + "px", s2.height = l.height + "px", s2.bottom = s2.right = "auto", s2.margin = 0, s2.position = "absolute"), u2.setCursor && (s2.cursor = "move"), o2.setLimit(u2.limit), n.assign(o2.dragEvent, { x: l.left, y: l.top }), n.on(o2.handle, o2.handlers.start);
      }, start: function(t2) {
        var e2 = this, o2 = e2.getCursor(t2), i2 = e2.element;
        e2.useTarget(t2.target || t2.srcElement) && (t2.preventDefault && !t2.target.getAttribute("contenteditable") ? t2.preventDefault() : t2.target.getAttribute("contenteditable") || (t2.returnValue = false), e2.dragEvent.oldZindex = i2.style.zIndex, i2.style.zIndex = 1e4, e2.setCursor(o2), e2.setPosition(), e2.setZoom(), n.on(document, e2.handlers.move));
      }, drag: function(t2) {
        var e2 = this, n2 = e2.dragEvent, o2 = e2.element, i2 = e2._cursor, r2 = e2._dimensions, s2 = e2.options, a2 = r2.zoom, u2 = e2.getCursor(t2), f = s2.threshold, l = (u2.x - i2.x) / a2 + r2.left, d = (u2.y - i2.y) / a2 + r2.top;
        !n2.started && f && Math.abs(i2.x - u2.x) < f && Math.abs(i2.y - u2.y) < f || (n2.original || (n2.original = { x: l, y: d }), n2.started || (s2.onDragStart(o2, l, d, t2), n2.started = true), e2.move(l, d) && s2.onDrag(o2, n2.x, n2.y, t2));
      }, move: function(t2, e2) {
        var n2 = this, o2 = n2.dragEvent, i2 = n2.options, r2 = i2.grid, s2 = n2.element.style, a2 = n2.limit(t2, e2, o2.original.x, o2.original.y);
        return !i2.smoothDrag && r2 && (a2 = n2.round(a2, r2)), (a2.x !== o2.x || a2.y !== o2.y) && (o2.x = a2.x, o2.y = a2.y, s2.left = a2.x + "px", s2.top = a2.y + "px", true);
      }, stop: function(t2) {
        var e2, o2 = this, i2 = o2.dragEvent, r2 = o2.element, s2 = o2.options, a2 = s2.grid;
        n.off(document, o2.handlers.move), r2.style.zIndex = i2.oldZindex, s2.smoothDrag && a2 && (e2 = o2.round({ x: i2.x, y: i2.y }, a2), o2.move(e2.x, e2.y), n.assign(o2.dragEvent, e2)), o2.dragEvent.started && s2.onDragEnd(r2, i2.x, i2.y, t2), o2.reset();
      }, reset: function() {
        this.dragEvent.started = false;
      }, round: function(t2) {
        var e2 = this.options.grid;
        return { x: e2 * Math.round(t2.x / e2), y: e2 * Math.round(t2.y / e2) };
      }, getCursor: function(t2) {
        return { x: (t2.targetTouches ? t2.targetTouches[0] : t2).clientX, y: (t2.targetTouches ? t2.targetTouches[0] : t2).clientY };
      }, setCursor: function(t2) {
        this._cursor = t2;
      }, setLimit: function(t2) {
        var e2 = this, o2 = function(t3, e3) {
          return { x: t3, y: e3 };
        };
        if (t2 instanceof Function) e2.limit = t2;
        else if (a(t2)) {
          var i2 = e2._dimensions, r2 = t2.scrollHeight - i2.height, u2 = t2.scrollWidth - i2.width;
          e2.limit = function(t3, e3) {
            return { x: n.limit(t3, [0, u2]), y: n.limit(e3, [0, r2]) };
          };
        } else if (t2) {
          var f = s(t2.x), l = s(t2.y);
          e2.limit = f || l ? function(e3, o3) {
            return { x: f ? n.limit(e3, t2.x) : e3, y: l ? n.limit(o3, t2.y) : o3 };
          } : o2;
        } else e2.limit = o2;
      }, setPosition: function() {
        var t2 = this.element, e2 = t2.style;
        n.assign(this._dimensions, { left: i(e2.left) || t2.offsetLeft, top: i(e2.top) || t2.offsetTop });
      }, setZoom: function() {
        for (var t2 = this.element, e2 = 1; t2 = t2.offsetParent; ) {
          var n2 = r(t2).zoom;
          if (n2 && "normal" !== n2) {
            e2 = n2;
            break;
          }
        }
        this._dimensions.zoom = e2;
      }, useTarget: function(t2) {
        var e2 = this.options.filterTarget;
        return !(e2 instanceof Function) || e2(t2);
      }, destroy: function() {
        n.off(this.handle, this.handlers.start), n.off(document, this.handlers.move);
      } }), o;
    });
  }
});
export default require_draggable_min();
//# sourceMappingURL=draggable.js.map
